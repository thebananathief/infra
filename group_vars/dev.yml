---
hostname_talos: talosdev

# ironicbadger.bash-aliases
bash_aliases:
  - { alias: dtail, command: "docker logs -tf --tail='50' " }
  - { alias: dstop, command: docker stop `docker ps -aq` }
  - { alias: drm, command: docker rm `docker ps -aq` }
  - { alias: dcp, command: "docker-compose -f ~/docker-compose.yml " }
  - { alias: edcp, command: vi ~/docker-compose.yml }
  - { alias: dprune, command: docker image prune }
  - { alias: dprunesys, command: docker system prune --all }
  - { alias: bashreload, command: source ~/.bashrc && echo Bash config reloaded; }
  - { alias: appd, command: cd /opt/appdata }
  - { alias: cpgraf, command: cp /opt/appdata/grafana/grafana.db /vagrant/provision/roles/blp-talos/files/appdata/grafana/grafana.db } # copy grafana settings / dashboards
  # - { alias: "dcips", command: "$'docker inspect -f \'{{.Name}}-{{range  $k, $v := .NetworkSettings.Networks}}{{$k}}-{{.IPAddress}} {{end}}-{{range $k, $v := .NetworkSettings.Ports}}{{ if not $v }}{{$k}} {{end}}{{end}} -{{range $k, $v := .NetworkSettings.Ports}}{{ if $v }}{{$k}} => {{range . }}{{ .HostIp}}:{{.HostPort}}{{end}}{{end}} {{end}}\' $(docker ps -aq) | column -t -s-'" }
  - { alias: dps, command: "docker ps --format 'table {{ '{{' }}`.Names{{ '}}' }}\t{{ '{{' }}`.Ports{{ '}}' }}\t{{ '{{' }}`.Status{{ '}}' }}'" }
  - { alias: dls, command: "docker container ls --format 'table {{.Names}}\t{{.Ports}}\t{{.Status}}' -a" }


# grog.package
package_list:
  - name: bash-completion
  - name: curl
  - name: git
  # - name: htop
  # - name: iftop
  # - name: iotop
  - name: lm-sensors
  - name: python3
  - name: python3-pip
  - name: sudo
  - name: tree
  - name: wget

# ironicbadger.docker_compose_generator
containers:
  - service_name: dozzle
    active: true
    image: amir20/dozzle:latest
    ports:
      - 8081:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  - service_name: whoami
    active: true
    image: containous/whoami
    ports:
      - 8080:80

  # template for docker-compose services
  #
  ###
  # - service_name:
  #   active: false
  #   image:
  #   container_name: #optional - only required if diff to service_name
  #   labels:
  #     - traefik.enable=true
  #     - "traefik.http.routers.XXXXXXX.rule=Host(`abs.m.{{ local_domain }}`)"
  #     #- traefik.http.routers.XXXXXXX.entrypoints=websecure
  #     #- traefik.http.routers.XXXXXXX.tls.certresolver=cloudflare
  #     - traefik.http.services.XXXXXXX.loadbalancer.server.port=80
  #     #- traefik.http.routers.XXXXXXX.middlewares=authelia@docker
  #   volumes:
  #     - "{{ appdata_path }}/app:/config"
  #   environment:
  #     -
  #   include_global_env_vars: #optional - defaults to false
  #   restart: unless-stopped
